"""
script to find CVE-2020-0792.
https://www.zerodayinitiative.com/blog/2020/5/7/how-a-deceptive-assert-caused-a-critical-windows-kernel-vulnerability
"""

import idautils 

def get_vuln_func(disasm_addrs_arr):
    bug_flag = False
    mm_user_flag = False
    for k in range(len(disasm_addrs_arr)):
            disasm = idc.GetDisasm(disasm_addrs_arr[k])
            # find the following disasm code 
            # call    _MicrosoftTelemetryAssertTriggeredNoArgsKM@0 
            if "call" in disasm and "MicrosoftTelemetryAssertTriggeredNoArgs" in disasm:
                # setting the flag
                bug_flag = True
                idx = k
                # iterate next four line to check if AccessViolation is called or not
                for j in range(1, 5): 
                    if len(disasm_addrs_arr) > idx + j:
                        disasm2 = idc.GetDisasm(disasm_addrs_arr[idx + j])
                        # find the following disasm code
                        # call    ds:__imp__ExRaiseAccessViolation@0
                        if ("call" in disasm2) and ("RaiseAccessViolation" in disasm2):
                            bug_flag = False;
                            break
                        elif ("jmp" in disasm2) and "loc_" in disasm2:
                          #text:000D2DB3 jmp     loc_598C3
                          jmp_addr = int(disasm2.split("_")[1], 16)
                          idx = disasm_addrs_arr.index(jmp_addr) - 2
                          
            # mov     eax, ds:__imp__MmUserProbeAddress
            elif "mov" in disasm and "MmUserProbeAddress" in disasm:
                mm_user_flag  = True
            
            if (bug_flag and mm_user_flag):
                print("func = {}, address = {:#x}".format(idc.get_func_name(disasm_addrs_arr[k]), disasm_addrs_arr[k]))
                # resetting the flag)
                bug_flag = False
                mm_user_flag = False
                
                
                
def iter_all_functions():
    
    # Get all the functions present in DLL
    for funcEA in idautils.Functions():
        flags = idc.get_func_flags(funcEA)
        if flags & FUNC_LIB or flags & FUNC_THUNK:
            continue

        disasm_addrs = list(idautils.FuncItems(funcEA))
        get_vuln_func(disasm_addrs)
        
def main():            
    print("\n\n\nstart ====")  
    iter_all_functions()
    print("\nsend ====")  
    
main()
